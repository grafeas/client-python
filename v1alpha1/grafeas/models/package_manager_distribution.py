# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grafeas.models.package_manager_architecture import PackageManagerArchitecture  # noqa: F401,E501
from grafeas.models.vulnerability_type_version import VulnerabilityTypeVersion  # noqa: F401,E501


class PackageManagerDistribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpe_uri': 'str',
        'architecture': 'PackageManagerArchitecture',
        'latest_version': 'VulnerabilityTypeVersion',
        'maintainer': 'str',
        'url': 'str',
        'description': 'str'
    }

    attribute_map = {
        'cpe_uri': 'cpe_uri',
        'architecture': 'architecture',
        'latest_version': 'latest_version',
        'maintainer': 'maintainer',
        'url': 'url',
        'description': 'description'
    }

    def __init__(self, cpe_uri=None, architecture=None, latest_version=None, maintainer=None, url=None, description=None):  # noqa: E501
        """PackageManagerDistribution - a model defined in Swagger"""  # noqa: E501

        self._cpe_uri = None
        self._architecture = None
        self._latest_version = None
        self._maintainer = None
        self._url = None
        self._description = None
        self.discriminator = None

        if cpe_uri is not None:
            self.cpe_uri = cpe_uri
        if architecture is not None:
            self.architecture = architecture
        if latest_version is not None:
            self.latest_version = latest_version
        if maintainer is not None:
            self.maintainer = maintainer
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description

    @property
    def cpe_uri(self):
        """Gets the cpe_uri of this PackageManagerDistribution.  # noqa: E501

        The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.  # noqa: E501

        :return: The cpe_uri of this PackageManagerDistribution.  # noqa: E501
        :rtype: str
        """
        return self._cpe_uri

    @cpe_uri.setter
    def cpe_uri(self, cpe_uri):
        """Sets the cpe_uri of this PackageManagerDistribution.

        The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.  # noqa: E501

        :param cpe_uri: The cpe_uri of this PackageManagerDistribution.  # noqa: E501
        :type: str
        """

        self._cpe_uri = cpe_uri

    @property
    def architecture(self):
        """Gets the architecture of this PackageManagerDistribution.  # noqa: E501


        :return: The architecture of this PackageManagerDistribution.  # noqa: E501
        :rtype: PackageManagerArchitecture
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this PackageManagerDistribution.


        :param architecture: The architecture of this PackageManagerDistribution.  # noqa: E501
        :type: PackageManagerArchitecture
        """

        self._architecture = architecture

    @property
    def latest_version(self):
        """Gets the latest_version of this PackageManagerDistribution.  # noqa: E501

        The latest available version of this package in this distribution channel.  # noqa: E501

        :return: The latest_version of this PackageManagerDistribution.  # noqa: E501
        :rtype: VulnerabilityTypeVersion
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this PackageManagerDistribution.

        The latest available version of this package in this distribution channel.  # noqa: E501

        :param latest_version: The latest_version of this PackageManagerDistribution.  # noqa: E501
        :type: VulnerabilityTypeVersion
        """

        self._latest_version = latest_version

    @property
    def maintainer(self):
        """Gets the maintainer of this PackageManagerDistribution.  # noqa: E501

        A freeform string denoting the maintainer of this package.  # noqa: E501

        :return: The maintainer of this PackageManagerDistribution.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this PackageManagerDistribution.

        A freeform string denoting the maintainer of this package.  # noqa: E501

        :param maintainer: The maintainer of this PackageManagerDistribution.  # noqa: E501
        :type: str
        """

        self._maintainer = maintainer

    @property
    def url(self):
        """Gets the url of this PackageManagerDistribution.  # noqa: E501

        The distribution channel-specific homepage for this package.  # noqa: E501

        :return: The url of this PackageManagerDistribution.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PackageManagerDistribution.

        The distribution channel-specific homepage for this package.  # noqa: E501

        :param url: The url of this PackageManagerDistribution.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this PackageManagerDistribution.  # noqa: E501

        The distribution channel-specific description of this package.  # noqa: E501

        :return: The description of this PackageManagerDistribution.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PackageManagerDistribution.

        The distribution channel-specific description of this package.  # noqa: E501

        :param description: The description of this PackageManagerDistribution.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageManagerDistribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
