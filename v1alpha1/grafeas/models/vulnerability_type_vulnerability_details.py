# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grafeas.models.vulnerability_type_package_issue import VulnerabilityTypePackageIssue  # noqa: F401,E501
from grafeas.models.vulnerability_type_severity import VulnerabilityTypeSeverity  # noqa: F401,E501


class VulnerabilityTypeVulnerabilityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'severity': 'VulnerabilityTypeSeverity',
        'cvss_score': 'float',
        'package_issue': 'list[VulnerabilityTypePackageIssue]'
    }

    attribute_map = {
        'type': 'type',
        'severity': 'severity',
        'cvss_score': 'cvss_score',
        'package_issue': 'package_issue'
    }

    def __init__(self, type=None, severity=None, cvss_score=None, package_issue=None):  # noqa: E501
        """VulnerabilityTypeVulnerabilityDetails - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._severity = None
        self._cvss_score = None
        self._package_issue = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if severity is not None:
            self.severity = severity
        if cvss_score is not None:
            self.cvss_score = cvss_score
        if package_issue is not None:
            self.package_issue = package_issue

    @property
    def type(self):
        """Gets the type of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501


        :return: The type of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VulnerabilityTypeVulnerabilityDetails.


        :param type: The type of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501

        Output only. The note provider assigned Severity of the vulnerability.  # noqa: E501

        :return: The severity of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :rtype: VulnerabilityTypeSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityTypeVulnerabilityDetails.

        Output only. The note provider assigned Severity of the vulnerability.  # noqa: E501

        :param severity: The severity of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :type: VulnerabilityTypeSeverity
        """

        self._severity = severity

    @property
    def cvss_score(self):
        """Gets the cvss_score of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.  # noqa: E501

        :return: The cvss_score of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this VulnerabilityTypeVulnerabilityDetails.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.  # noqa: E501

        :param cvss_score: The cvss_score of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :type: float
        """

        self._cvss_score = cvss_score

    @property
    def package_issue(self):
        """Gets the package_issue of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501

        The set of affected locations and their fixes (if available) within the associated resource.  # noqa: E501

        :return: The package_issue of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :rtype: list[VulnerabilityTypePackageIssue]
        """
        return self._package_issue

    @package_issue.setter
    def package_issue(self, package_issue):
        """Sets the package_issue of this VulnerabilityTypeVulnerabilityDetails.

        The set of affected locations and their fixes (if available) within the associated resource.  # noqa: E501

        :param package_issue: The package_issue of this VulnerabilityTypeVulnerabilityDetails.  # noqa: E501
        :type: list[VulnerabilityTypePackageIssue]
        """

        self._package_issue = package_issue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityTypeVulnerabilityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
