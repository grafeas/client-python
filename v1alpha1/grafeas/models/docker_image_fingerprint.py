# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DockerImageFingerprint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'v1_name': 'str',
        'v2_blob': 'list[str]',
        'v2_name': 'str'
    }

    attribute_map = {
        'v1_name': 'v1_name',
        'v2_blob': 'v2_blob',
        'v2_name': 'v2_name'
    }

    def __init__(self, v1_name=None, v2_blob=None, v2_name=None):  # noqa: E501
        """DockerImageFingerprint - a model defined in Swagger"""  # noqa: E501

        self._v1_name = None
        self._v2_blob = None
        self._v2_name = None
        self.discriminator = None

        if v1_name is not None:
            self.v1_name = v1_name
        if v2_blob is not None:
            self.v2_blob = v2_blob
        if v2_name is not None:
            self.v2_name = v2_name

    @property
    def v1_name(self):
        """Gets the v1_name of this DockerImageFingerprint.  # noqa: E501

        The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.  # noqa: E501

        :return: The v1_name of this DockerImageFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._v1_name

    @v1_name.setter
    def v1_name(self, v1_name):
        """Sets the v1_name of this DockerImageFingerprint.

        The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.  # noqa: E501

        :param v1_name: The v1_name of this DockerImageFingerprint.  # noqa: E501
        :type: str
        """

        self._v1_name = v1_name

    @property
    def v2_blob(self):
        """Gets the v2_blob of this DockerImageFingerprint.  # noqa: E501

        The ordered list of v2 blobs that represent a given image.  # noqa: E501

        :return: The v2_blob of this DockerImageFingerprint.  # noqa: E501
        :rtype: list[str]
        """
        return self._v2_blob

    @v2_blob.setter
    def v2_blob(self, v2_blob):
        """Sets the v2_blob of this DockerImageFingerprint.

        The ordered list of v2 blobs that represent a given image.  # noqa: E501

        :param v2_blob: The v2_blob of this DockerImageFingerprint.  # noqa: E501
        :type: list[str]
        """

        self._v2_blob = v2_blob

    @property
    def v2_name(self):
        """Gets the v2_name of this DockerImageFingerprint.  # noqa: E501

        Output only. The name of the image's v2 blobs computed via:   [bottom] := v2_blob[bottom]   [N] := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.  # noqa: E501

        :return: The v2_name of this DockerImageFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._v2_name

    @v2_name.setter
    def v2_name(self, v2_name):
        """Sets the v2_name of this DockerImageFingerprint.

        Output only. The name of the image's v2 blobs computed via:   [bottom] := v2_blob[bottom]   [N] := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.  # noqa: E501

        :param v2_name: The v2_name of this DockerImageFingerprint.  # noqa: E501
        :type: str
        """

        self._v2_name = v2_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerImageFingerprint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
