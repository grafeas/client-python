# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grafeas.models.longrunning_operation import LongrunningOperation  # noqa: F401,E501


class ApiCreateOperationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent': 'str',
        'operation_id': 'str',
        'operation': 'LongrunningOperation'
    }

    attribute_map = {
        'parent': 'parent',
        'operation_id': 'operation_id',
        'operation': 'operation'
    }

    def __init__(self, parent=None, operation_id=None, operation=None):  # noqa: E501
        """ApiCreateOperationRequest - a model defined in Swagger"""  # noqa: E501

        self._parent = None
        self._operation_id = None
        self._operation = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        if operation_id is not None:
            self.operation_id = operation_id
        if operation is not None:
            self.operation = operation

    @property
    def parent(self):
        """Gets the parent of this ApiCreateOperationRequest.  # noqa: E501

        The projectId that this operation should be created under.  # noqa: E501

        :return: The parent of this ApiCreateOperationRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ApiCreateOperationRequest.

        The projectId that this operation should be created under.  # noqa: E501

        :param parent: The parent of this ApiCreateOperationRequest.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def operation_id(self):
        """Gets the operation_id of this ApiCreateOperationRequest.  # noqa: E501

        The ID to use for this operation.  # noqa: E501

        :return: The operation_id of this ApiCreateOperationRequest.  # noqa: E501
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ApiCreateOperationRequest.

        The ID to use for this operation.  # noqa: E501

        :param operation_id: The operation_id of this ApiCreateOperationRequest.  # noqa: E501
        :type: str
        """

        self._operation_id = operation_id

    @property
    def operation(self):
        """Gets the operation of this ApiCreateOperationRequest.  # noqa: E501

        The operation to create.  # noqa: E501

        :return: The operation of this ApiCreateOperationRequest.  # noqa: E501
        :rtype: LongrunningOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ApiCreateOperationRequest.

        The operation to create.  # noqa: E501

        :param operation: The operation of this ApiCreateOperationRequest.  # noqa: E501
        :type: LongrunningOperation
        """

        self._operation = operation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCreateOperationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
