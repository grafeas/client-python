# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grafeas.models.api_project_repo_id import ApiProjectRepoId  # noqa: F401,E501


class ApiRepoId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_repo_id': 'ApiProjectRepoId',
        'uid': 'str'
    }

    attribute_map = {
        'project_repo_id': 'project_repo_id',
        'uid': 'uid'
    }

    def __init__(self, project_repo_id=None, uid=None):  # noqa: E501
        """ApiRepoId - a model defined in Swagger"""  # noqa: E501

        self._project_repo_id = None
        self._uid = None
        self.discriminator = None

        if project_repo_id is not None:
            self.project_repo_id = project_repo_id
        if uid is not None:
            self.uid = uid

    @property
    def project_repo_id(self):
        """Gets the project_repo_id of this ApiRepoId.  # noqa: E501

        A combination of a project ID and a repo name.  # noqa: E501

        :return: The project_repo_id of this ApiRepoId.  # noqa: E501
        :rtype: ApiProjectRepoId
        """
        return self._project_repo_id

    @project_repo_id.setter
    def project_repo_id(self, project_repo_id):
        """Sets the project_repo_id of this ApiRepoId.

        A combination of a project ID and a repo name.  # noqa: E501

        :param project_repo_id: The project_repo_id of this ApiRepoId.  # noqa: E501
        :type: ApiProjectRepoId
        """

        self._project_repo_id = project_repo_id

    @property
    def uid(self):
        """Gets the uid of this ApiRepoId.  # noqa: E501

        A server-assigned, globally unique identifier.  # noqa: E501

        :return: The uid of this ApiRepoId.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ApiRepoId.

        A server-assigned, globally unique identifier.  # noqa: E501

        :param uid: The uid of this ApiRepoId.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiRepoId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
