# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grafeas.models.deployment_details_platform import DeploymentDetailsPlatform  # noqa: F401,E501


class DeployableDeploymentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_email': 'str',
        'deploy_time': 'datetime',
        'undeploy_time': 'datetime',
        'config': 'str',
        'address': 'str',
        'resource_uri': 'list[str]',
        'platform': 'DeploymentDetailsPlatform'
    }

    attribute_map = {
        'user_email': 'user_email',
        'deploy_time': 'deploy_time',
        'undeploy_time': 'undeploy_time',
        'config': 'config',
        'address': 'address',
        'resource_uri': 'resource_uri',
        'platform': 'platform'
    }

    def __init__(self, user_email=None, deploy_time=None, undeploy_time=None, config=None, address=None, resource_uri=None, platform=None):  # noqa: E501
        """DeployableDeploymentDetails - a model defined in Swagger"""  # noqa: E501

        self._user_email = None
        self._deploy_time = None
        self._undeploy_time = None
        self._config = None
        self._address = None
        self._resource_uri = None
        self._platform = None
        self.discriminator = None

        if user_email is not None:
            self.user_email = user_email
        if deploy_time is not None:
            self.deploy_time = deploy_time
        if undeploy_time is not None:
            self.undeploy_time = undeploy_time
        if config is not None:
            self.config = config
        if address is not None:
            self.address = address
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if platform is not None:
            self.platform = platform

    @property
    def user_email(self):
        """Gets the user_email of this DeployableDeploymentDetails.  # noqa: E501

        Identity of the user that triggered this deployment.  # noqa: E501

        :return: The user_email of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this DeployableDeploymentDetails.

        Identity of the user that triggered this deployment.  # noqa: E501

        :param user_email: The user_email of this DeployableDeploymentDetails.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def deploy_time(self):
        """Gets the deploy_time of this DeployableDeploymentDetails.  # noqa: E501

        Beginning of the lifetime of this deployment.  # noqa: E501

        :return: The deploy_time of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._deploy_time

    @deploy_time.setter
    def deploy_time(self, deploy_time):
        """Sets the deploy_time of this DeployableDeploymentDetails.

        Beginning of the lifetime of this deployment.  # noqa: E501

        :param deploy_time: The deploy_time of this DeployableDeploymentDetails.  # noqa: E501
        :type: datetime
        """

        self._deploy_time = deploy_time

    @property
    def undeploy_time(self):
        """Gets the undeploy_time of this DeployableDeploymentDetails.  # noqa: E501

        End of the lifetime of this deployment.  # noqa: E501

        :return: The undeploy_time of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._undeploy_time

    @undeploy_time.setter
    def undeploy_time(self, undeploy_time):
        """Sets the undeploy_time of this DeployableDeploymentDetails.

        End of the lifetime of this deployment.  # noqa: E501

        :param undeploy_time: The undeploy_time of this DeployableDeploymentDetails.  # noqa: E501
        :type: datetime
        """

        self._undeploy_time = undeploy_time

    @property
    def config(self):
        """Gets the config of this DeployableDeploymentDetails.  # noqa: E501

        Configuration used to create this deployment.  # noqa: E501

        :return: The config of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DeployableDeploymentDetails.

        Configuration used to create this deployment.  # noqa: E501

        :param config: The config of this DeployableDeploymentDetails.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def address(self):
        """Gets the address of this DeployableDeploymentDetails.  # noqa: E501

        Address of the runtime element hosting this deployment.  # noqa: E501

        :return: The address of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DeployableDeploymentDetails.

        Address of the runtime element hosting this deployment.  # noqa: E501

        :param address: The address of this DeployableDeploymentDetails.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def resource_uri(self):
        """Gets the resource_uri of this DeployableDeploymentDetails.  # noqa: E501

        Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.  # noqa: E501

        :return: The resource_uri of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this DeployableDeploymentDetails.

        Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.  # noqa: E501

        :param resource_uri: The resource_uri of this DeployableDeploymentDetails.  # noqa: E501
        :type: list[str]
        """

        self._resource_uri = resource_uri

    @property
    def platform(self):
        """Gets the platform of this DeployableDeploymentDetails.  # noqa: E501

        Platform hosting this deployment.  # noqa: E501

        :return: The platform of this DeployableDeploymentDetails.  # noqa: E501
        :rtype: DeploymentDetailsPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeployableDeploymentDetails.

        Platform hosting this deployment.  # noqa: E501

        :param platform: The platform of this DeployableDeploymentDetails.  # noqa: E501
        :type: DeploymentDetailsPlatform
        """

        self._platform = platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployableDeploymentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
