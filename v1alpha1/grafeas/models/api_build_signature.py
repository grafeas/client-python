# coding: utf-8

"""
    Grafeas API

    An API to insert and retrieve annotations on cloud artifacts.  # noqa: E501

    OpenAPI spec version: v1alpha1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grafeas.models.build_signature_key_type import BuildSignatureKeyType  # noqa: F401,E501


class ApiBuildSignature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public_key': 'str',
        'signature': 'str',
        'key_id': 'str',
        'key_type': 'BuildSignatureKeyType'
    }

    attribute_map = {
        'public_key': 'public_key',
        'signature': 'signature',
        'key_id': 'key_id',
        'key_type': 'key_type'
    }

    def __init__(self, public_key=None, signature=None, key_id=None, key_type=None):  # noqa: E501
        """ApiBuildSignature - a model defined in Swagger"""  # noqa: E501

        self._public_key = None
        self._signature = None
        self._key_id = None
        self._key_type = None
        self.discriminator = None

        if public_key is not None:
            self.public_key = public_key
        if signature is not None:
            self.signature = signature
        if key_id is not None:
            self.key_id = key_id
        if key_type is not None:
            self.key_type = key_type

    @property
    def public_key(self):
        """Gets the public_key of this ApiBuildSignature.  # noqa: E501

        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures, this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`  # noqa: E501

        :return: The public_key of this ApiBuildSignature.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ApiBuildSignature.

        Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures, this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`  # noqa: E501

        :param public_key: The public_key of this ApiBuildSignature.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def signature(self):
        """Gets the signature of this ApiBuildSignature.  # noqa: E501

        Signature of the related `BuildProvenance`, encoded in a base64 string.  # noqa: E501

        :return: The signature of this ApiBuildSignature.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ApiBuildSignature.

        Signature of the related `BuildProvenance`, encoded in a base64 string.  # noqa: E501

        :param signature: The signature of this ApiBuildSignature.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def key_id(self):
        """Gets the key_id of this ApiBuildSignature.  # noqa: E501

        An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).  # noqa: E501

        :return: The key_id of this ApiBuildSignature.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ApiBuildSignature.

        An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).  # noqa: E501

        :param key_id: The key_id of this ApiBuildSignature.  # noqa: E501
        :type: str
        """

        self._key_id = key_id

    @property
    def key_type(self):
        """Gets the key_type of this ApiBuildSignature.  # noqa: E501


        :return: The key_type of this ApiBuildSignature.  # noqa: E501
        :rtype: BuildSignatureKeyType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this ApiBuildSignature.


        :param key_type: The key_type of this ApiBuildSignature.  # noqa: E501
        :type: BuildSignatureKeyType
        """

        self._key_type = key_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiBuildSignature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
